@page "/eventstore"
@inject AppState App
@inject CronusClient Cronus
@inject IJSRuntime JSRuntime
@inject ILogger<EventStore> Log

<div class="pin">
    <MudTextField @bind-Value="@AggregateId" Label="Aggregate ID" style="width:800px"></MudTextField>
    <MudIconButton Icon="@Icons.Material.Filled.Search" OnClick="@(async ()=> await GetAggregateAsync())"></MudIconButton>
</div>

<MudExpansionPanels Elevation="3">
    @foreach (var commit in commits)
    {
        <MudExpansionPanels>
            <MudExpansionPanel>
                <TitleContent>
                    <h5 class="mat-subtitle1">Commit revision @commit.AggregateRootRevision - @commit.Timestamp.ToString("MMM d'th' yyyy, hh:mm:ss.fff")</h5>
                </TitleContent>
                <ChildContent>
                    @foreach (var theEvent in commit.Events)
                    {
                        @if (@theEvent.IsEntityEvent)
                        {
                            <span style="color:maroon;font-size: 125%">
                                @theEvent.EventPosition
                                <Icon Identifier="bookmark" />
                                @theEvent?.EventName
                            </span>
                        }
                        else if (@theEvent.IsPublicEvent)
                        {
                            <span style="color:royalblue;font-size: 125%">
                                @theEvent.EventPosition
                                <Icon Identifier="bookmark" />
                                @theEvent?.EventName
                            </span>
                        }
                        else
                        {
                            <span style="color:forestgreen;font-size: 125%">
                                @theEvent.EventPosition
                                <Icon Identifier="bookmark" />
                                @theEvent?.EventName
                            </span>
                        }

                        <RepublishEvent AggregateId="@AggregateId" Event="@theEvent" AggregateCommit="commit"></RepublishEvent>
                        <div class="json-box">
                            <pre Style="@($"color:{Colors.LightGreen.Accent3};")">@theEvent.EventData</pre>
                        </div>
                    }
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>
    }
</MudExpansionPanels>


@code {

    string AggregateId { get; set; }

    List<AggregateCommitDto> commits = new List<AggregateCommitDto>();
    string details = string.Empty;

    async Task GetAggregateAsync()
    {
        AggregateDto ar = await Cronus.GetAggregate(App.Connection, AggregateId);
        if (ar is null == false && ar.Commits is null == false)
        {
            foreach (var commit in ar.Commits)
            {
                foreach (var evnt in commit.Events)
                {
                    evnt.EventData = await FormatJsonAsync(evnt.EventData);
                }
                commit.Events = commit.Events.OrderByDescending(e => e.EventPosition).ToList();
            }

            commits = ar.Commits.OrderByDescending(commit => commit.AggregateRootRevision).ToList();

            StateHasChanged();
        }
        else
        {
            commits.Clear();
        }
    }

    public async Task<string> FormatJsonAsync(object data)
    {
        return await JSRuntime.InvokeAsync<string>("JSON.stringify", data, null, 4);
    }
}
