@inject AppState App
@inject CronusClient Cronus
@inject IJSRuntime JSRuntime

@if (Projection is null)
{
    <span>Please select a connection...</span>
}
else
{
    <div>
        <span style="font-size:large"><cite>@Projection.ProjectionName</cite></span>
        <span style="font-size:small"><cite>@Projection.ProjectionContractId</cite></span>
        <label class="sr-only" for="inlineFormInput">Name</label>
        <ProjectionVersionBadge Projection="@Projection" Version="@Projection.LatestVersion" LiveVersion="@Projection.LiveVersion" AllVersions="@Projection.Versions"></ProjectionVersionBadge>
        <hr class="solid">
        <form class="form-inline" style="align-items: flex-start">
            <input type="text" @bind="@projectionId" class="form-control mb-2" style="width:500px" placeholder="urn:">

            <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="@(async ()=> await GetProjectionAsync())" Class="ml-3">
                State
            </MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="@(async ()=> await GetProjectionEventsAsync())" Class="ml-2">
                Events
            </MudButton>
        </form>
    </div>
    <hr class="solid">

    <div class="row">
        <div class="col .w-100">
            <div>
                <h3>State</h3>
                <pre style="color:white">@state</pre>

            </div>
        </div>
        <div class="col .w-100">
            <h3>Events</h3>
            <MudExpansionPanels>
                @foreach (var commit in commits)
                {
                    <MudExpansionPanel>
                        <TitleContent>
                            <h3 class="mat-subtitle1">@commit.Timestamp.ToString("MMM d'th' yyyy, hh:mm:ss.fff")</h3>
                        </TitleContent>
                        <ChildContent>
                            @foreach (var theEvent in commit.Events)
                            {
                                <MudExpansionPanels>
                                    <MudExpansionPanel>
                                        @if (@theEvent.IsEntityEvent)
                                        {
                                            <span style="color:maroon">
                                                @theEvent.EventPosition
                                                <Icon Identifier="bookmark" />
                                                @theEvent?.EventName
                                            </span>
                                        }
                                        else if (@theEvent.IsPublicEvent)
                                        {
                                            <span style="color:royalblue">
                                                @theEvent.EventPosition
                                                <Icon Identifier="bookmark" />
                                                @theEvent?.EventName
                                            </span>
                                        }
                                        else
                                        {
                                            <span style="color:forestgreen">
                                                @theEvent.EventPosition
                                                <Icon Identifier="bookmark" />
                                                @theEvent?.EventName
                                            </span>
                                        }
                                        <div class="json-box">
                                            <pre>@theEvent.EventData</pre>
                                        </div>
                                    </MudExpansionPanel>
                                </MudExpansionPanels>
                            }
                        </ChildContent>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
        </div>
    </div>
}

@code {

    [Parameter]
    public string Name { get; set; }

    Projection Projection;

    List<Projection> projections = new List<Projection>();

    List<ProjectionCommitDto> commits = new List<ProjectionCommitDto>();

    string projectionId = string.Empty;
    string state = "";
    string details = string.Empty;
    string eventsLabel = "Events";

    protected override Task OnInitializedAsync()
    {
        App.OnChange += StateHasChanged;
        App.OnConnectionChanged += GetProjectionsList;

        return GetProjectionsList(App.Connection);
    }

    protected async Task GetProjectionsList(Connection connection)
    {
        if (connection is null == false)
        {
            var result = await Cronus.GetProjectionsAsync(@App.Connection);
            projections = result.Result.Projections;

            Projection = projections.Where(x => x.ProjectionContractId == Name).SingleOrDefault();

            StateHasChanged();
        }
    }

    async Task GetProjectionAsync()
    {
        if (projectionId != string.Empty)
        {
            ProjectionStateDto projection = await Cronus.GetProjectionAsync(App.Connection, Projection.ProjectionContractId, projectionId);
            if (projection is null == false && projection.State is null == false)
            {
                state = await JSRuntime.InvokeAsync<string>("JSON.stringify", projection.State, null, 4);
                commits = new List<ProjectionCommitDto>();
                StateHasChanged();
            }
            else
            {
                state = "Invalid URN!";
                commits = new List<ProjectionCommitDto>();
            }
        }
        else state = "Enter URN!";
    }

    async Task GetProjectionEventsAsync()
    {
        ProjectionCommitsDto projection = await Cronus.GetProjectionEventsAsync(App.Connection, Projection.ProjectionContractId, projectionId);
        if (projection is null == false && projection.Commits is null == false)
        {
            foreach (var commit in projection.Commits)
            {
                foreach (var evnt in commit.Events)
                {
                    evnt.EventData = await FormatJsonAsync(evnt.EventData);
                }
                commit.Events = commit.Events.OrderByDescending(e => e.EventPosition).ToList();
            }

            commits = projection.Commits.OrderByDescending(commit => commit.Timestamp).ToList();

            eventsLabel = $"Events ({commits.SelectMany(c => c.Events).Count()})";

            StateHasChanged();
        }
        else
        {
            commits.Clear();
        }

    }

    public async Task<string> FormatJsonAsync(object data)
    {
        return await JSRuntime.InvokeAsync<string>("JSON.stringify", data, null, 4);
    }
}
